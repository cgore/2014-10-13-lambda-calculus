% Copyright (c) 2014, Christopher Mark Gore,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage[normalem]{ulem}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}


\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.2,0.2,0.2}
\definecolor{keywordcolor}{rgb}{0.1,0.3,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\small\ttfamily,
  language=Ruby,
  morekeywords={make-instance},
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.5in,keepaspectratio=true]{#1}
  \end{center}
}

\title{\psshadowbox{Ruby {\textcolor{Red}{$\heartsuit$}} $\lambda$ Calculus}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Monday, October 13, {\smaller AD} 2014} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{stlruby.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


\begin{slide}
  \h{Math Can be Difficult, but Fun!}

  \begin{itemize}
  \item Mathematics is about finding patterns.
  \item Mathematics is usually the simplest way to talk about complex subjects.
  \item Mathematics can be confusing because of:
    \begin{itemize}
    \item bad notation,
    \item bad textbooks,
    \item bad teachers,
    \item \textit{and sometimes \textellipsis}
    \end{itemize}
  \end{itemize}
\end{slide}


\begin{slide}
  \h{\textellipsis Bad Students}

  \fullSlideImage{stupid-students.eps}
\end{slide}


\begin{slide}
  \h{Computer Science is Mathematics}

  \begin{itemize}
  \item Computer science \textbf{is not} computer programming.
  \item Computer science \textbf{is not} software engineering.
  \item Computer science \textbf{is not} science, it's better than that:
  \item Computer science \textbf{is actually} mathematics.
  \item Computer science \textbf{really is} useful for computer programmers, in
    spite of some arguments to the contrary.
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Lambda Calculus}

  \begin{itemize}
  \item Lambda calculus \textbf{is not} the same ``calculus'' you learned in
    your high school or college ``Calculus'' class.
  \item It's a different calculus: there are a lot of others than just these two
    (and a lot of other algebras than the normal one as well.)
  \item It is actually \textbf{easier to use} for specific tasks than other
    options (typically making mathematical proofs about algorithms.)
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Alonzo Church Invented It}

  \fullSlideImage{Alonzo-Church.eps}
  \textit{``Lambda's where it's at.''}
\end{slide}


\begin{slide}
  \h{All of Lambda Calculus on Just One Slide!}

  \begin{itemize}
  \item Where $e$ is any expression,
  \item $f$ is any function,
  \item $n$ is any name, and
  \item $a$ is any application:
  \end{itemize}

  $$ e := n | f | a $$
  $$ f := \lambda n . e $$
  $$ a := e e $$
\end{slide}


\begin{slide}
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{We're Done!}}}}
  \end{center}

  \begin{center}
    \includegraphics[height=2.25in]{then-a-miracle-occurs-cartoon.eps}
  \end{center}

  \textit{Actually, some explanation might be in order \textellipsis}
\end{slide}


\begin{slide}
  \h{Cool Facts about Lambda Calculus}

  \begin{itemize}
  \item It's the smallest universal programming language in the universe!
  \item Church developed the lambda calculus to formalize the concept of
    effective computability in the 1930's.
  \item It's Turing complete!
  \item There is only one transformation rule: variable substitution.
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Names}

  \begin{itemize}
  \item Names (or \textit{variables}, or \textit{atoms}) are just any unique
    identifier, typically just a single letter.
  \item We'll mostly just use single letters: $a$, $b$, $c$, etc.
  \item The best equivalent in Ruby are symbols:
    \begin{itemize}
      \item \texttt{:a},
      \item \texttt{:b},
      \item \texttt{:c},
      \item \texttt{:joe\_don\_baker},
      \item etc.
    \end{itemize}
  \end{itemize}
\end{slide}


\begin{slide}
  \h{Expressions}

  The most important part of lambda calculus is the concept of an expression.
  $$ e := n | f | a $$
  From this we see it's just any name, function, or application.
  Expressions are \textbf{everything!}

  \begin{center}
    \includegraphics[height=1.75in]{everything-is-awesome.eps}
  \end{center}
\end{slide}



\begin{slide}
  \h{Functions}

  \begin{itemize}
  \item
    A function\footnote{Technically, this must be a \textit{computable function},
      but don't worry about what that actually means.}
    (also called an \textit{abstraction}) just maps from a name to an expression:
    $ f := \lambda n . e $
  \item
    The name on the left is the \textit{argument} for the function, and the
    expression to the right is the \textit{body} of the function.
  \item
    Functions have most of the syntax in the entire language: the lambda
    ($\lambda$) and the period ($.$).
  \item
    The closest equivalent in Ruby is, of course, the function. But, only taking
    in a single argument.

\begin{lstlisting}
->(n){e}
\end{lstlisting}
\end{itemize}
\end{slide}


\begin{slide}
  \h{Applications}

  An application is just two expressions.  They are really here just for glue, so
  that expressions can expand out like a tree forever, don't worry about them.
  $$ a := e e $$
  But, we \textit{apply} functions to expressions, that is the most common
  direct use of them.
\end{slide}


\begin{slide}
  \h{Parentheses and Left Association}

  Expressions can be surrounded by parentheses for clarity of order.
  $$ (E) = E $$
  For \textit{clarity}%
  \footnote{Actually, this is the main problem with the
    lack of clarity found in the Lambda Calculus.  It allows for quite terse and
    short formulas, but not really clear.  It's kind of like RPN, it just takes
    some getting used to.}
  the left-association rule is used:
  $$ E_1 E_2 E_3 = (E_1 E_2) E_3 $$
  $$ E_1 E_2 E_3 E_4 = \left( (E_1 E_2) E_3 \right) E_4 $$
  $$ E_1 E_2 E_3 \ldots E_n = \left( \ldots \left( (E_1 E_2) E_3 \right) \ldots E_n \right) $$
\end{slide}


\begin{slide}
  \h{The Identity Function}

  The identity function:
  $$ \lambda x.x $$
  It just returns what it is given.

  How would this look in Ruby?
\begin{lstlisting}
->(x){x}
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Applying Functions}

  We can \textit{apply} a function to an expression:
  Let's apply the identity function to a really simple expression, just a single
  atom:
  $$ (\lambda x.x) y = [y/x] x = y$$
  The \textit{bracket notation}\footnote{Sometimes to confuse you authors will
    write this as $[x:=y]$ instead; notice that they are backwards, $[x:=y]
    \equiv [y/x]$.}
  that we see
  in $[y/x]$ tells us to replace all $x$'s with $y$'s in the expression that
  follows.
  
  How would this look in Ruby?
\begin{lstlisting}
->(x){x}[:y] # Returns :y 
\end{lstlisting}

  We can easily see what is happening here: where ever there is an $x$ in the
  body of the function, the right hand side of the application is substituted,
  in this case $y$.
\end{slide}


\begin{slide}
  \h{Free and Bound Variables}

  All variables are local to the scope of their function.
  $$ \lambda x.xy $$
  In this function definition:
  \begin{itemize}
  \item $x$ is a \textit{bound} variable.
  \item $y$ is a \textit{free} variable.
  \end{itemize}

  But this goes \textit{per expression}, so in
  $$ (\lambda x.x) (\lambda y.yx) $$
  we have $x$ as first bound and then free; the two instances of $x$ are
  completely independent of each other.

\end{slide}


\begin{slide}
  \h{Two Irritations That Are Actually Intentional Features}

  \begin{itemize}
  \item Functions are always anonymous: we get around this by
    \textit{unofficially} assigning names to expressions, like
    $$ \pmb{I} = \lambda x.x $$
  \item Functions only ever take a single variable: we get around this with
    \textit{currying}, which we'll discuss shortly.
  \end{itemize}
  This is to make the semantics more simple, but can be irritating sometimes otherwise.
\end{slide}


\begin{slide}
  \h{$\alpha$ Equivalence}

  The specific symbols used for the arguments of function definitions don't
  matter, and can be switched out at will.
  $$ \pmb{I} = \lambda x.x
  \equiv \lambda y.y
  \equiv \lambda z.z
  \equiv \lambda \smiley.\smiley $$
\end{slide}


\begin{slide}
  \h{$\beta$ Reductions}

  The formal name for using those brackets is a \textit{$\beta$ reduction}.
  In a class setting, you might get the limitless joy of working a lot of these
  out by hand for hours on end.

  Here's a short one I found on the Internet:\footnote{\texttt{https://gist.github.com/homelinen/4012463}}
\end{slide}


\begin{slide}
\begin{eqnarray*}
&& (\lambda xyz.xyz)(\lambda x.xx)(\lambda x.x)x \\
& \to_\beta & (\lambda yz.xyz)[x := \lambda x.xx](\lambda x.x)x \\
& \equiv & (\lambda yz.(\lambda x.xx)yz)(\lambda x.x)x \\
& \to_\beta & (\lambda yz.(xx)[ x := y]z)(\lambda x.x)x \\
& \equiv & (\lambda yz.yyz)(\lambda x.x)x \\
& \to_\beta & (\lambda z.yy)[ y := \lambda x.x ]x \\
& \equiv & (\lambda z.(\lambda x.x)(\lambda x.x)z)x \\
& \to_\beta & (\lambda z.x[x := \lambda x.x]z)x \\
& \equiv & (\lambda z.(\lambda x.x)z)x \\
& \to_\beta & (\lambda z.x[x := z])x \\
& \equiv & (\lambda z.z)x \\
& \to_\beta & z[z := x] \\
& \equiv & x
\end{eqnarray*}
\end{slide}


\begin{slide}
  \h{Currying}

  One of the more irritating things about functions in lambda calculus is that
  they can take only one argument.  What do we do when we want more arguments?
  We curry.
  $$ \lambda xy.y \equiv \lambda x.(\lambda y.y) $$

  \begin{center}
    \includegraphics[height=1.75in]{indian-curry.eps}
  \end{center}
\end{slide}


\begin{slide}
  \h{Currying in Ruby}
  The equivalent in Ruby is something like this.
\begin{lstlisting}
# Like this, the simple version.
i1 = ->(x){->(y){y}[x]}
i1[:howza] # Returns :howza
# Or like this (since Ruby 1.9.)
i2 = ->(x){ ->(y){y}.curry[x] }
i2[:howza] # Also returns :howza
\end{lstlisting}

  \begin{center}
    \includegraphics[height=1.31in]{ruby-curry.eps}
  \end{center}
\end{slide}


\begin{slide}
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{Questions?}}}}
  \end{center}
\end{slide}


\begin{slide}
  \h{References}

  \begin{itemize}
  \item
    \textit{Introduction to Lambda Calculus}
    (Henk Barendregt and Erik Barendsen, 2000.)
  \item
    \textit{The Untyped Lambda Calculus}
    (Manuel Eberl, 2011.)
  \item
    \textit{A Tutorial Introduction to the Lambda Calculus}
    (Ra\'ul Rojas, 1997.)
  \item
    \textit{$\lambda$ Calculus -- Church Numerals and Lists}
    (Michael Smith, 2004.)
  \end{itemize}
  
\end{slide}

\end{document}
